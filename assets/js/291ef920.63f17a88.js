"use strict";(self.webpackChunk_notifiles_documentation=self.webpackChunk_notifiles_documentation||[]).push([[8907],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>f});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(58168),o=(n(96540),n(15680));const i={sidebar_position:2},a="Terms, definitions and components",s={unversionedId:"concepts/components",id:"version-1.0/concepts/components",title:"Terms, definitions and components",description:"Inputs",source:"@site/versioned_docs/version-1.0/concepts/components.mdx",sourceDirName:"concepts",slug:"/concepts/components",permalink:"/documentation/docs/concepts/components",draft:!1,editUrl:"https://github.com/notifiles/generator-notifiles/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0/concepts/components.mdx",tags:[],version:"1.0",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Philosophy",permalink:"/documentation/docs/concepts/philosophy"},next:{title:"Guides",permalink:"/documentation/docs/category/guides"}},c={},p=[{value:"Inputs",id:"inputs",level:2},{value:"Input Library",id:"input-library",level:2},{value:"Validation schema",id:"validation-schema",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"terms-definitions-and-components"},"Terms, definitions and components"),(0,o.yg)("h2",{id:"inputs"},"Inputs"),(0,o.yg)("p",null,"Inputs are reusable components that follow the ",(0,o.yg)("inlineCode",{parentName:"p"},"Notifiles input")," api."),(0,o.yg)("h2",{id:"input-library"},"Input Library"),(0,o.yg)("p",null,"An input librariy is a function that provides an input based on a unique key."),(0,o.yg)("h2",{id:"validation-schema"},"Validation schema"),(0,o.yg)("p",null,"A validation schema is an object that tells whether an input value is valid or not."))}d.isMDXComponent=!0}}]);